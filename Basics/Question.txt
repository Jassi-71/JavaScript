Beginner-Level Interview Questions
What is JavaScript, and how does it differ from Java?
Answer: JavaScript is a lightweight, interpreted programming language used to make web pages interactive, while Java is a compiled, object-oriented programming language used for building various applications. JavaScript runs in browsers, and Java runs in virtual machines or servers.

What are the data types in JavaScript?
Answer: Primitive types include:
Number
String
Boolean
Null
Undefined
Symbol (ES6)
BigInt (ES11)
Non-primitive type: Object (including Array, Function, etc.).

What is the difference between var, let, and const?
Answer:
var: Function-scoped, can be redeclared, hoisted.
let: Block-scoped, cannot be redeclared, hoisted but not initialized.
const: Block-scoped, must be initialized at the time of declaration, cannot be reassigned.

What is the use of console.log() in JavaScript?
Answer: It is used to print messages, values, or debugging information to the browser’s console.

What is a JavaScript function, and how do you declare one?
Answer: A JavaScript function is a block of reusable code.
Example: function greet() { console.log('Hello!'); }

Explain == vs. === in JavaScript.
Answer:
== checks for value equality, performing type coercion.
=== checks for strict equality (value and type).

What is the DOM (Document Object Model)?
Answer: The DOM is a programming interface for web documents that represents the structure of an HTML document as a tree of objects, allowing JavaScript to manipulate and interact with it.

What is an event in JavaScript?
Answer: An event is an action or occurrence detected by the browser, such as clicks, keystrokes, or mouse movements.

How do you add JavaScript to an HTML document?
Answer: Use the <script> tag:
<script src="script.js"></script>

What is the difference between synchronous and asynchronous programming in JavaScript?
Answer:
Synchronous: Code is executed line by line, blocking subsequent code until the current execution is complete.
Asynchronous: Code execution continues without waiting for a task to complete (e.g., setTimeout).


Intermediate-Level Interview Questions (2+ Years Experience)
1. Explain closures in JavaScript with an example.
A closure is a function that retains access to its lexical scope even when the function is executed outside of that scope. Closures allow functions to "remember" the environment in which they were created.
  function outerFunction(outerVariable) {
      return function innerFunction(innerVariable) {
          console.log(`Outer Variable: ${outerVariable}, Inner Variable: ${innerVariable}`);
      };
  }
  const newFunction = outerFunction("Hello");
  newFunction("World"); // Output: Outer Variable: Hello, Inner Variable: World
Here, innerFunction is a closure because it accesses outerVariable from outerFunction's scope even after outerFunction has finished executing.


2. What are JavaScript promises, and how do they work?
A promise in JavaScript represents a value that may be available now, in the future, or never. It's a way to handle asynchronous operations more cleanly than traditional callbacks. Promises have three states:
2.1 Pending: The initial state.
2.2 Fulfilled: The operation completed successfully.
2.3 Rejected: The operation failed.

  const fetchData = () => {
      return new Promise((resolve, reject) => {
          setTimeout(() => {
              resolve("Data fetched successfully!");
          }, 1000);
      });
  };
  
  fetchData()
      .then((data) => console.log(data)) // Output: Data fetched successfully!
      .catch((error) => console.error(error));

3. How is this keyword used in JavaScript?
The this keyword refers to the object it belongs to, but its value depends on how the function is called:
Global context: Refers to the global object (window in browsers, global in Node.js).
Object method: Refers to the object the method is called on.
Arrow functions: Do not have their own this; they inherit it from the surrounding lexical scope.
Strict mode: If not explicitly bound, this is undefined.

4. What are higher-order functions in JavaScript?
A higher-order function is a function that either:
Takes one or more functions as arguments, or returns another function.
Example - 
  function calculate(operation, a, b) {
      return operation(a, b);
  }
  const add = (x, y) => x + y;
  const multiply = (x, y) => x * y;
  
  console.log(calculate(add, 5, 3)); // Output: 8
  console.log(calculate(multiply, 5, 3)); // Output: 15

5. What is hoisting in JavaScript?
Hoisting is JavaScript's default behavior of moving declarations to the top of the scope. Variables declared using var and function declarations are hoisted, but only the declarations are moved—not initializations.
Example -
  console.log(x); // undefined (hoisting)
  var x = 10;
  
  hoistedFunction(); // Works due to hoisting
  function hoistedFunction() {
      console.log("I am hoisted!");
  }
Note: let and const are not hoisted in the same way and remain in a "temporal dead zone" until their declaration.

6. What is the difference between null and undefined?
null: Represents the intentional absence of any value. It's an object and is explicitly assigned.
undefined: Indicates a variable that has been declared but not assigned a value, or a non-existent property.  
Example - let a = null;
          let b;
          
          console.log(a); // null
          console.log(b); // undefined


7. What are arrow functions, and how are they different from regular functions?
Arrow functions provide a concise syntax for writing functions. They differ from regular functions in a few key ways:
No *this* binding: Arrow functions inherit *this* from their enclosing context.
Cannot be used as constructors.
Do not have their own arguments object.

8. What is the difference between forEach(), map(), and filter()?
forEach(): Iterates over an array but does not return a new array. It is typically used for side effects like logging.
map(): Transforms each element in an array and returns a new array with the transformed values.
filter(): Filters elements based on a condition and returns a new array with elements that satisfy the condition.

9. How does JavaScript handle errors? Explain try-catch blocks.
JavaScript uses try-catch blocks to handle errors. When an error occurs in the try block, control moves to the catch block where the error can be handled.
The finally block executes regardless of whether an error was thrown or not.

10. What is an IIFE (Immediately Invoked Function Expression)?
An Immediately Invoked Function Expression (IIFE) is a function that is defined and executed immediately after its definition. It doesn’t require an explicit call to run. IIFEs are primarily used to create a private scope to avoid polluting the global namespace or to isolate variables from the surrounding code.
Example - (function () {
              // Function body
          })();
The parentheses around the function definition ensure it’s treated as an expression, and the following parentheses () immediately invoke it.
Real-Life Example of an IIFE
1. Encapsulating Variables to Avoid Conflicts
Suppose you’re writing code that interacts with other libraries, and you want to ensure your variables don’t conflict with global variables or other library code. Using an IIFE creates a private scope. Examples - (function () {
                                                      const apiKey = "12345-ABCDE"; // Private variable, inaccessible outside the IIFE
                                                      console.log("API Key initialized");
                                                  
                                                      function fetchData() {
                                                          console.log(`Fetching data with API Key: ${apiKey}`);
                                                      }
                                                   
                                                      fetchData();
                                                  })();

                                                  // Trying to access `apiKey` outside will throw an error
                                                  console.log(apiKey); // ReferenceError: apiKey is not defined
2. Module Pattern Example
IIFEs are often used to implement module patterns, where you want to expose only certain parts of your code as public while keeping the rest private.
Example - const CounterModule = (function () {
            let count = 0; // Private variable
            function increment() {
                count++;
                console.log(`Count is now: ${count}`);
            }
            function decrement() {
                count--;
                console.log(`Count is now: ${count}`);
            }
            // Expose public methods
            return {
                increment,
                decrement,
            };
        })();
        
        CounterModule.increment(); // Count is now: 1
        CounterModule.increment(); // Count is now: 2
        CounterModule.decrement(); // Count is now: 1
        console.log(CounterModule.count); // undefined (count is private)

3. One-Time Initialization
IIFEs can be used for setup or initialization tasks that need to be performed only once.
Example - (function () {
              console.log("Application initialized!");
              // Perform setup tasks like attaching event listeners, configuring settings, etc.
          })();



Advanced-Level Interview Questions (4+ Years Experience)
Explain the JavaScript event loop and how it handles asynchronous operations.
What is the difference between call(), apply(), and bind()?
What are modules in JavaScript? How are ES6 modules different from CommonJS?
What are Web APIs in JavaScript? Name a few commonly used ones.
What is debouncing and throttling in JavaScript, and why are they important?
What are proxies in JavaScript, and how do they work?
Explain the concept of immutability in JavaScript.
What is a generator function in JavaScript?
What are service workers, and how do they enable progressive web apps?
Explain how JavaScript is used to improve web performance (e.g., lazy loading, code splitting).
